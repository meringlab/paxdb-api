const D3Node = require('d3-node');
const d3 = require('d3');

const styles = `
.bar rect {
  fill-opacity: 0;
  stroke:       black;
  stroke-width: 0.5;
}

.highlight rect {
  fill:       red;
  fill-opacity: 1;
}
.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}
`;
const options = { svgStyles: styles, d3Module: d3 };

const margin = { top: 10, right: 30, bottom: 30, left: 50 };
const widthFull = 600 - margin.left - margin.right;
const heightFull = 350 - margin.top - margin.bottom;
const widthThumb = 200;
const heightThumb = 120;

/**
 *
 * @param abundances
 * @param highlightAbundance optional
 * @return {D3Node}
 */
// eslint-disable-next-line no-unused-vars
function thumbThreshold(values, min, max) {
  return Math.max(10, Math.min(30, d3.thresholdScott(values, min, max)));
}

function makeHistogram(abundances, highlightAbundance, thumb) {
  const width = thumb ? widthThumb : widthFull;
  const height = thumb ? heightThumb : heightFull;

  const d3n = new D3Node(options);
  const data = abundances.map(a => Math.log10(a));
  const abundanceLog10 = Math.log10(highlightAbundance);

//IMPORTANT, domain.min must be > 0 for log scale to work!
  const x = d3.scaleLinear().range([0, width]).domain([Math.log10(0.01), Math.log10(1000000)]);
  const bins = d3.histogram()
    .domain(x.domain())
    .thresholds(thumb ? d3.thresholdSturges : d3.thresholdScott)(data);

  const y = d3.scaleLinear()
    .domain([0, d3.max(bins, d => d.length)])
    .range([height, 0]);

  const svg = d3n.createSVG()
    .attr('width', width + margin.left + margin.right)
    .attr('height', height + margin.top + margin.bottom)
    .append('g')
    .attr('transform', `translate(${margin.left},${margin.top})`);

  const bar = svg.selectAll('.bar')
    .data(bins)
    .enter().append('g')
    .attr('class', 'bar')
    .attr('transform', d => `translate(${x(d.x0)},${y(d.length)})`);
  if (abundanceLog10) {
    bar.attr('class', d => {
      /**
       * from d3 API https://github.com/d3/d3-array/blob/master/README.md#histogram
       *
       * x0 - the lower bound of the bin (inclusive).
       * x1 - the upper bound of the bin (exclusive, except for the last bin).
       *
       * so to be correct we'd have to check if (bins[bins.length-1].x1 === highlightAbundance),
       * but since we've forced bins[bins.length-1].x1 to be 1000'000, which should never happen,
       * that can be ignored.
       */
      if ((d.x0 <= abundanceLog10 && abundanceLog10 < d.x1)
      /*|| (bins[bins.length-1].x1 === abundanceLog10)*/) {
        return 'bar highlight';
      }
      return 'bar';
    });
  }
  bar.append('rect')
    .attr('x', 1)
    .attr('width', x(bins[0].x1) - x(bins[0].x0) - 1)
    .attr('height', d => height - y(d.length));

  if (thumb) {
    return d3n; //axis not needed
  }
  const xAxis = d3.axisBottom(x).ticks(4)
    .tickFormat(d => {
      if (d === -2) { //0.01
        return '0.01';
      } else if (d === 6) { //1000000
        return '';
      }
      return Math.round(Math.pow(10, d));
    });

  svg.append('g')
    .attr('class', 'axis axis--x')
    .attr('transform', `translate(0,${height})`)
    .call(xAxis);

  svg.append('g')
    .attr('class', 'axis axis--y')
    .call(d3.axisLeft(y));
  return d3n;
}

if (typeof module !== 'undefined' && module.exports) { // Node.js
  module.exports = makeHistogram;
} else if (typeof define !== 'undefined' && define.amd) { // eslint-disable-line no-undef
  // AMD / RequireJS
  define([], function amddefinemod() { // eslint-disable-line no-undef, prefer-arrow-callback
    return makeHistogram;
  });
} else {  // included directly via <script> tag
  root.makeHistogram = makeHistogram;
}

// DEMO:
// eslint-disable-next-line max-len
// var abundances  =[74,321,89.6,5.98,27.8,143,182,1205,589,1865,470,300,58.3,26.9,0.781,1.67,25.1,918,36.5,71.4,14.7,37.8,87.2,678,5.06,1.56,44.3,69.3,8.73,19.7,1313,265,36.4,4,15.5,47.3,81.1,50.1,140,1069,1217,255,729,1030,153,40.9,2.23,62.8,773,25.9,758,1.99,732,1155,10.5,182,105,2160,18.5,38.7,26,197,45,10.3,371,9.52,22.3,35.8,750,6.8,25.9,33.3,13.6,177,398,67,151,28.3,57.2,65.1,61.9,631,4203,4917,3997,24410,241,815,719,4356,5643,3738,9255,2824,7759,14341,9574,2559,3707,12534,5610,6883,4867,3848,4265,5759,6950,16113,8358,8299,4627,5385,6043,8266,306,1147,171,891,4211,4508,5707,1796,3928,4.51,13.2,1.84,4.79,3336,2036,12.8,163,248,2.63,21.2,26.1,6.42,138,63.9,49.4,168,654,321,1.45,1.34,35.9,1.83,114,11.8,63.2,147,6.98,2.85,49.9,10,202,194,39.1,38.5,4.7,4.5,125,20.6,53.1,3.98,121,264,82.3,6.21,11.2,1.4,5.22,13.1,94.2,1.21,64.4,76.7,4.13,122,12.1,42.1,1.33,12.7,13,2.82,4.74,10.4,45.7,33,2.44,667,27.4,16.8,1267,1.41,36.5,4.07,1.33,1243,139,6.56,657,2329,1193,37.1,13.9,419,104,6.12,303,774,272,54,101,477,18.8,1300,219,1.14,0.51,124,10.9,17.8,148,50.9,3.28,72.3,1.83,5.78,4.84,62.5,465,87.2,8.52,1.95,1087,145,18.7,6.82,564,705,508,138,9.13,20.1,19.3,44,366,9.87,3.02,3.27,27.1,16.4,4.17,30.6,156,1.48,52.8,893,15.1,1.32,28.1,513,28.3,0.808,131,2.31,595,18.9,3.77,14.3,36.3,58.1,20.6,18,122,160,8.62,4.38,45.3,10.6,15.8,120,434,20.4,20.6,5.98,148,200,23.1,61.9,2.58,6.35,10.3,22,2.82,1885,32.8,4.77,50.9,1.24,236,7.19,62.2,54,495,218,99.8,465,108,5.6,26.2,36.1,36.4,26.4,65.6,95.9,46.5,193,15.9,586,375,46.2,44.5,32.9,3.24,23.9,35.9,3.69,2.86,260,75.8,5.8,15.3,18.2,2.17,3.41,934,15.1,18.3,106,37.8,11.8,114,28.8,22.3,83.6,3.5,1.28,40.2,16.6,2.25,21.3,1.6,2.33,8.03,10.1,15.9,55,50,9.19,36.6,113,8.85,5.21,6.92,26,1.01,28.4,83.3,66.4,79.6,39.4,81.2,8.16,4,10.6,3.79,20.2,4.22,24.8,5.91,121,33,8.01,33.5,25.2,18.6,9.47,24.6,23,16.3,6407,6210,23.6,2.72,101,48.7,1.16,1.74,158,332,17.9,147,204,2286,62.6,104,22.2,2.99,35,28.3,251,27.4,24.9,604,164,918,698,1533,368,758,198,243,289,1212,746,172,2,423,29.3,56.4,75.2,160,4.51,10.8,4.49,359,427,460,6.37,568,47.2,19.5,3.44,9.83,0.744,319,69.6,4.21,6.32,78.5,0.108,0.764,350,195,3.28,22.4,269,32.4,9.69,28.8,221,280,69,20.4,10.9,37.6,18.9,26.6,162,17.4,116,7.44,11.6,38.1,760,331,2185,99.6,4.51,37.3,17.2,48.7,42,141,116,193,1.29,304,79.9,248,26.9,97.3,210,12.6,5.02,109,4.51,11.8,23.1,378,363,272,131,30.9,26,36.2,29,59.3,18.2,8.68,7.34,5.3,0.865,6.91,79.9,124,61.3,8.23,114,28.6,843,2.46,1.08,195,984,21.5,280,38.1,77,58.7,2.56,2.76,1.54,458,83.7,73.1,16.9,3.34,102,500,96.9,42.3,384,1302,781,918,37.2,7.04,28.3,0.155,161,5.63,33.3,2.99,42.4,108,96.7,14.1,17.5,5.48,40.3,44.7,26845,36.1,3.81,95.2,8.31,23.4,25.5,2.48,46.8,28.7,42.6,34.7,133,137,182,294,93.8,129,7.46,31.2,88.8,2.88,19.1,219,2.9,123,1.07,58.7,300,312,4.06,132,18.8,23.7,1.81,13.1,8.31,354,10,29.4,33,46.4,97.7,11.8,16.7,850,0.769,3.93,41.7,76.1,84.8,2503,53.2,371,1102,691,554,106,24.1,2.9,86.6,300,9.88,67.4,151,25.7,29.9,77.9,20.3,93.8,68.8,320,263,130,88.4,252,1.44,1.61,265,44.2,35.4,491,264,22.8,46.2,112,164,1.5,92.7,8.12,24.4,58.9,20.3,3.92,3.2,1.65,5.04,13.2,5.28,10.7,14.2,6.14,21.4,67.8,46.5,310,0.323,1.79,0.83,4.74,45.6,4.69,26.5,8.2,74.6,274,644,50.8,94.9,57.8,18.9,17.8,11.7,355,1.5,11.7,127,547,178,208,86.4,141,466,9.5,67.2,157,467,48.4,89.1,169,120,1246,110,142,61.5,32.5,85.4,46.6,129,382,1.01,18.3,13,26.5,349,59.4,52.1,15.5,768,40.4,44.1,238,1187,77.9,576,808,6.75,68.3,1612,115,330,240,40.8,12.1,61.9,408,66.9,96.5,24.4,29,49.8,0.562,35.6,28.2,3.81,3.46,121,46.9,15.3,32.9,1.28,4.67,10.7,493,7.97,2.57,2.57,17.9,138,5.32,2052,989,8.28,776,14.5,31.8,228,75.7,1.7,89.9,181,193,5.55,2.56,15.8,41.3,5.53,72.6,446,24.9,128,15.9,44.2,21,27.8,5.64,231,4.57,1.11,4.01,26.9,720,61.5,18.4,2.44,111,40.6,97.8,327,121,137,2773,14.9,154,122,118,138,1215,238,2.3,203,13,25,2.07,2.11,73.3,308,6.03,26.6,666,795,168,168,129,94.8,292,2419,21,81.3,112,269,80.2,52.7,16.9,26.6,178,284,42,47.4,151,11,1491,8344,1069,293,823,56.9,46.3,1.3,130,145,24.2,38.5,0.645,3.21,23.5,610,207,16.1,16.4,50.7,208,1339,46,9.5,122,8.05,464,5.08,2.28,1.04,19,2.21,138,1118,437,22.1,84.5,71.6,168,206,206,26.7,209,284,8.84,14.4,215,194,1181,74.8,512,8.55,1890,2253,2820,3299,18.9,297,194,84.5,0.14,78.7,338,36.2,5.9,352,326,16.6,755,24.5,5.42,70.3,105,90.7,168,6.56,541,31.1,17.5,17,7.34,33,20.2,76.9,1506,52.7,309,4.46,50.3,32.6,74.8,15.6,98.5,141,8.5,171,48.4,174,54.3,129,909,84.2,8.5,154,102,14.2,51.5,165,198,53.1,1.05,984,491,15.8,106,463,63.2,136,250,273,422,112,200,308,669,264,757,1503,27,113,25.6,33.8,9.77,32.1,131,299,350,24.6,0.573,37.8,127,23.2,34.1,70,184,32.5,48.2,11,1128,321,67.3,66.6,82,3.23,45.5,97.9,326,1030,2720,156,35.1,149,4546,132,137,9343,205,158,19.5,5744,136,5.83,3,2414,2060,5.36,159,62,80.4,262,677,7.37,54.6,33.2,269,43.7,16.2,5.24,161,7.54,24.5,38.5,1217,70.3,403,20.8,92.7,1209,9.13,3.53,67.8,2.14,9.91,118,240,3.36,9.66,2.97,20.8,3817,4237,570,1953,27,3.7,48.3,168,370,23.9,537,550,374,49,750,47.3,140,7.65,30.1,7560,680,31.4,1.56,22.2,1336,218,787,275,7.89,28.5,232,109,162,74,69.2,487,24.3,363,108,363,144,117,97.5,195,86.2,9.68,17.4,6.58,1.95,38.7,2.04,2.51,11,3.2,4.7,1.71,3.23,1.05,0.906,4.26,30.9,3.78,19.5,1.81,98.1,6.88,15.8,288,12.6,36,166,120,70,9.09,10.6,17.9,1913,14.7,1.46,3.16,4.19,0.769,4.76,9.12,37.7,21.1,69.5,31,1565,72.3,378,5.2,3.48,2.12,145,167,1590,1096,95.3,29.2,102,1057,37.9,77.7,19.5,349,113,624,35.5,25.6,34.3,32.8,102,17.4,0.398,13.6,3.45,0.294,7.2,6.14,5.09,8.16,1.7,5.63,0.564,35.2,26.3,45.7,3.51,5.47,5.23,645,581,39.7,2.15,63.7,378,22.2,51.8,207,78,112,62.9,118,1.36,104,2.24,230,180,11.9,1801,166,103,76.1,26.4,1.35,137,138,7.33,19.2,17.8,35.8,1.36,14.5,18,13,38.7,18,68.8,541,57.6,331,341,316,6.32,61.5,1621,7.98,30.9,27.8,6.03,4.42,56.8,103,19.9,82.4,819,17.4,0.616,440,125,99.3,402,6.41,57,0.957,1.11,2.11,24.2,98.5,2.58,59.8,2.27,61.8,1.86,2.34,604,17.7,8.24,5.97,17.3,25.6,15.2,27.2,72.9,4.67,12.3,36.8,14.8,57.9,5.65,5.04,155,4.42,0.161,2.14,186,9.26,1.04,3.21,12,54.8,31.5,819,10.4,1755,14.7,4.5,58.8,5.71,26,157,31.6,54.9,23.9,6.7,71.5,96.5,69.1,135,16.9,198,363,2.01,32.9,42,253,14.2,669,467,186,8.74,100,48.3,12,27206,8.57,7.95,52.9,10.2,30.4,29.6,75,1053,226,7.05,141,32.4,7.11,43,732,29.5,4.51,324,5.41,13.8,204,5.3,1.73,12.4,508,1035,108,107,15.2,572,131,176,21.2,10.7,11.6,4.59,125,84.5,137,24.6,64.6,163,484,8.12,62,30.8,516,137,414,3.12,11.8,604,259,736,106,693,6.78,25.2,15.3,390,325,9195,65.4,42.5,99.9,100,4.9,2087,453,86.9,305,28.7,3.93,104,0.601,1055,3.64,1464,25.6,12.8,53.1,32.8,289,33.1,23.7,72.8,202,20.3,37.6,111,636,66.1,63.9,21.2,58,170,26.5,816,82.5,151,19.3,72.1,29.3,552,513,6.25,370,94.5,52.7,113,62.5,263,109,5.07,320,6.43,104,261,12.4,3.06,10.9,17.2,3.3,33,12.9,72.1,27.3,494,1217,35.4,369,2.88,333,307,2049,549,278,172,208,143,60.2,349,127,14.3,0.886,17.9,62.5,185,33.4,106,27.8,33,45.6,168,18.6,1101,148,377,326,1411,29.8,0.267,1516,122,292,16.3,21.4,0.266,237,66.7,732,165,119,213,0.878,281,3109,77.4,15.1,355,8.46,9.35,2.73,83.7,181,5.94,21.6,37.8,7.08,2.77,13.8,3031,553,872,21.5,11.2,6.99,540,28.9,3094,5.6,23.8,347,166,3.43,12.9,23.8,25.8,24,53.8,175,1.42,69.1,94.4,43.6,512,261,1.55,130,63.3,228,69.1,93.9,62.7,94.1,85.6,80.6,53.1,1115,64.3,1514,5117,37.7,47.3,48,2593,984,6.71,7.14,117,1.78,9222,5.56,70.3,137,4.85,26.6,493,145,66.6,724,37,63.2,196,8.65,1.91,0.184,16.7,2.71,53.8,30.5,21.4,0.587,24.3,349,250,10.6,2.27,85.7,4.15,85.8,38.8,630,104,1.48,8.81,79.8,31.8,32.7,1.81,6.28,5.29,0.746,22.7,0.878,104,161,23.7,18,933,300,46.3,7.85,49.9,12.1,6.13,10.4,704,1.8,4.61,47.9,20.9,4.24,21.5,7.96,11.3,72.8,1.9,15.9,32.8,4.24,360,2.06,107,818,2709,58.5,38.5,92.7,28.5,48.2,694,162,94.6,291,26.5,113,3.9,3.5,45.9,32.1,46.1,1.07,113,553,282,139,98.4,541,18.1,216,4.09,443,202,5063,57.8,60,3.73,46.2,27.1,7.34,479,565,77.2,21.3,101,31.5,23.6,132,12.4,5670,18778,181,80.9,12.9,219,362,142,15.6,14.2,245,12.4,212,192,2.03,82.3,218,99.1,565,4075,0.853,439,408,1169,685,4264,1221,397,24.8,105,331,137,19.3,44.1,92.3,7.56,107,786,1136,195,107,357,3.63,2611,2.15,122,154,79.3,59.5,0.498,49.4,41.5,41.8,53.9,4.97,16,391,333,1.27,15.3,15.8,3.77,2.26,25.5,218,82.3,7034,3903,2174,34.9,408,1480,1.1,2.68,311,419,25.9,5.44,89.6,201,1111,12.4,4.31,110,5.52,78.4,77.2,167,4537,3061,731,1328,596,260,319,969,4.36,151,5.05,4.56,0.244,361,143,553,76.7,550,58.9,1338,2.39,55.7,205,202,23.6,59.6,97.4,7.67,1.24,7.02,320,17.4,3.66,5613,276,123,10,29.4,221,2753,438,1075,492,143,456,49.8,398,274,56.4,197,9.44,6.36,160,4.96,9.75,4.1,36.4,78.3,23.1,13.4,12.5,23.7,42.2,71,273,120,18.2,246,78.6,18.1,59.6,388,25.4,199,3.04,4.01,97.4,60.1,4.95,30.6,12.5,76.5,3.71,21.4,13.8,233,818,376,378,1.98,0.122,55.3,1626,131,143,792,247,789,1.08,8.13,45.9,486,2.23,8.59,8.41,1.19,73.3,74.6,366,62.5,321,19.1,9.49,9.94,55.9,446,18.3,568,6.38,78.4,8.28,75.2,0.867,204,342,108,323,19.8,131,985,45.7,326,28.7,2697,72.9,266,14,56.4,10,112,49.7,61.2,27.7,12.7,83.3,650,51.9,16.4,3.33,357,11.2,3.55,4.17,8.7,44.8,85.3,12.7,4.28,4.33,1.23,160,166,6.06,158,20.4,38,13.7,109,3.99,181,188,79.6,6691,1.3,1041,165,106,49.7,69.7,444,193,213,287,22.2,2.77,122,81.4,153,152,0.067,7.12,789,94.3,1.18,76.7,117,137,10.9,82.8,3.78,803,7.85,132,1134,1382,9.06,147,165,172,205,5.73,43.9,2.45,0.068,66.3,24.5,22.9,86.1,23.5,20.9,373,656,208,17.1,210,4.11,621,292,256,1194,1525,1992,233,252,7.58,1071,310,111,14,35.8,21.2,19.3,180,49.1,8.16,340,43.9,50.5,9.68,3.77,877,217,2.07,18.1,102,165,19.8,190,68.1,150,10.4,7.79,28.6,139,75.1,33.9,539,15.3,5.36,0.776,671,87.1,4.26,129,658,612,6.76,327,660,2.74,849,51.5,17.6,577,68.5,235,458,41.7,31.5,75.5,65.3,115,380,40.1,111,23.7,85,8.38,9.05,72.5,8.82,198,233,1221,260,0.724,117,170,68.5,217,7.24,116,136,435,305,3534,631,2605,2256,6870,37.8,5.03,6.32,4.25,2.02,617,377,304,8.61,2.63,1.47,1.63,3.1,325,7.4,313,1.15,1.96,13.9,8.34,20.9,53.1,108,32.3,62,25.4,9.54,58.5,1849,2.57,50.8,3.68,337,110,230,2.94,6.85,26.3,8.7,21.8,264,16.5,14.6,78,133,356,686,78.9,13.7,16.7,87,431,118,328,168,735,224,298,157,4.05,34.9,7.11,68.5,1.9,70.3,61.8,58.2,14,4.62,0.076,4.27,1.83,62.7,11.1,445,220,1725,56.3,29.7,2.72,20.2,290,278,327,194,307,1329,24.5,35.3,369,116,19499,135,103,387,274,30,63.4,482,97.5,55.7,179,3.28,2.61,1.22,26.1,6.99,372,112,400,246,15.5,653,76.3,2.57,97,53.9,33.6,95.4,82.5,311,12.4,0.719,7.97,60.1,28.7,30.3,103,512,2.62,323,109,66.8,62.2,243,155,270,97.8,80.5,19.1,28.3,6.94,0.822,1.82,177,34.5,248,233,19.4,6.59,3.52,71.5,45.1,2.43,42.8,2.44,316,122,330,217,91.6,38.8,560,51.6,415,18.7,88.6,2.17,140,84.7,46.1,10.8,7.5,590,54.4,104,54.5,26.1,40.5,53.8,1.87,5.73,141,624,1372,483,1267,523,2797,546,232,686,3269,92,279,50.9,8.02,7.73,219,40.9,114,173,14.8,1519,33.6,190,66.8,2387,3777,446,97.7,317,589,1.8,3.15,60.7,79.2,2.27,10.1,15.7,1.9,276,140,33.1,33,12.5,70.6,117,259,226,32.7,1321,61.8,123,31.4,8.7,9.84,20,3.74,1073,197,212,4.78,9.28,88.2,39.5,65.5,5.4,3.02,223,97.2,13525,47.8,4.2,109,30.3,27,302,8.61,29.6,5.9,389,1.16,141,2.94,266,202,625,1177,18.3,34.1,3.62,0.927,12.1,31.7,26.3,327,49.1,172,48.4,2.11,28.4,366,1.62,290,30.8,2.39,9.4,56.7,110,174,77.8,6.71,487,119,41.9,14.4,142,13.4,11.3,23.3,3.81,3.56,2.66,0.471,1.23,22.5,3.24,6.12,41.9,1.55,16.4,8682,252,1.53,257,108,371,1260,105,5.21,42.9,6.49,73.9,25.5,4.95,7.34,0.917,39.4,49.1,61.6,424,439,296,36.8,18.2,386,3.67,6.98,15.3,32.6,21,7.48,199,36,372,1.09,22,32.6,16,154,17.6,41.4,90.2,6.47,467,4.41,3.03,13.6,10,33.7,22.9,34.2,41.3,46.5,34.3,36.8,397,5.06,9.78,301,93.1,282,39.7,246,29.9,21,45.6,342,345,2.97,31.4,3.33,1.81,5.2,14.9,27.2,93.7,4899,522,40,3.91,101,155,24.8,236,35.4,69.3,61.3,58.6,66.7,7.16,15.4,26.7,437,21.6,222,3.67,21.9,42.9,43.7,125,1092,1.98,10.7,1.11,1599,28.1,2.82,8.52,66.4,1389,49.4,59,0.065,326,20.5,47.5,7.02,7.27,26.1,10.1,3.22,33.8,39.1,6.69,3309,2188,11420,405,6.27,4.88,110,4597,53.4,68.7,169,27.8,95.9,237,155,776];
// var d3n = makeHistogram(abundances, 27206);
// fs.writeFile(`highlighted.svg`, d3n.svgString(), (err) => {
//   if (err) console.log(`${datasetId} failed: ${err.message}`);
// });
